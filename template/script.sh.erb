#!/bin/bash

exec > >(tee -a live_log.log)
exec 2>&1

source .env
# Set defaults to prod if .env is not found
RUN_ENVIRONMENT=${RUN_ENVIRONMENT:-prod}
PROJECT_ROOT=${PROJECT_ROOT:-/srv/scratch/sbf-pipelines/proteinfold}
DB_PATH=${DB_PATH:-/srv/scratch/sbf-pipelines/proteinfold/dbs}
BRANCH=${BRANCH:-master}
REPOSITORY=${REPOSITORY:-Australian-Structural-Biology-Computing/proteinfold}

set -xo pipefail
set -eE

# Define debug directory at the top
NOW=$(date +%Y%m%d_%H%M%S)
RUNNAME="${USER}_${NOW}"
DEBUGDIR="/srv/scratch/sbf/debug/${RUNNAME}"

trap "collect_debug_files" ERR

function collect_debug_files() {
    echo "Error occurred, copying debug files to ${DEBUGDIR}"
    mkdir -p "$DEBUGDIR"
    rsync -a . "${NXF_WORK}" "$DEBUGDIR/"
}

# Set dependency version numbers
VERSION_SAMPLESHEET_UTILS="1.1.2"
source "${PROJECT_ROOT}/${RUN_ENVIRONMENT}/venv/bin/activate"

export NXF_WORK="/srv/scratch/${USER}/.proteinfold/work/${RUNNAME}"

# Native environment cacheDir used for caching blobs during image pulls
export APPTAINER_CACHEDIR="${APPTAINER_CACHEDIR:-/srv/scratch/${USER}/.images}"
export SINGULARITY_CACHEDIR="${SINGULARITY_CACHEDIR:-/srv/scratch/${USER}/.images}"

# Nextflow variables, checks libraryDir and if image is not found downloads to cache
export NXF_APPTAINER_CACHEDIR="${NXF_APPTAINER_CACHEDIR:-/srv/scratch/${USER}/.images}"
export NXF_SINGULARITY_CACHEDIR="${NXF_SINGULARITY_CACHEDIR:-/srv/scratch/${USER}/.images}"
export NXF_APPTAINER_LIBRARYDIR="${NXF_APPTAINER_LIBRARYDIR:-/srv/scratch/sbf-pipelines/proteinfold/singularity}"
export NXF_SINGULARITY_LIBRARYDIR="${NXF_SINGULARITY_LIBRARYDIR:-/srv/scratch/sbf-pipelines/proteinfold/singularity}"

export PROTEINFOLD_VERSION="1.1.1"

mkdir -p "${NXF_WORK}"

function check_depend_version() {
	# Ensure that script is running in prod
	if [ "${RUN_ENVIRONMENT}" == "prod" ]; then
			# Check samplesheet utils
			LOCAL_SAMPLESHEET_VERSION=$(pip3 list 2>&1 | grep samplesheetutils | cut -d' ' -f2)
			if [ "${LOCAL_SAMPLESHEET_VERSION}" != "${VERSION_SAMPLESHEET_UTILS}"]; then
				echo "VERSION MISMATCH! samplesheet-utils does not match expected version. installed version is ${LOCAL_SAMPLESHEET_VERSION}, expected ${VERSION_SAMPLESHEET_UTILS}"
				exit 1
			fi
	fi
}

check_depend_version

module purge
module load java/21 nextflow/24

# Check if the input is an amino acid sequence or a path
user_input="<%= context.samplesheet %>"
echo "${user_input}" >> $HOME/debug.txt

RUN_DIR=$(echo "<%= context.run_name %>" | sed "s#[^A-Za-z0-9]#_#g")
OUT_DIR="/srv/scratch/${USER}/proteinfold_output/${RUN_DIR}"
mkdir -p "${OUT_DIR}"

MODE=""
[[ "${user_input}" =~ ^[A-Z\*\-]*$ ]] && MODE="MANUAL_INPUT"
[[ "${user_input}" =~ ^.*\.csv$ ]] && MODE="SAMPLESHEET_INPUT"
[[ "${MODE}" == "" ]] && MODE="DIRECTORY"

echo "${MODE}"

create-samplesheet --version
SAMPLESHEET=""

af_method="<%= context.af_method %>"
OUTPUT_FORMAT=""
case "${af_method}" in
    hf3)  OUTPUT_FORMAT="--json" ;;
    *)    OUTPUT_FORMAT="" ;;
esac

if [ "${MODE}" == "MANUAL_INPUT" ];
then
    create-samplesheet --aa-string "${user_input}" --suffix "<%= context.prot_mode %>" ${OUTPUT_FORMAT}
    SAMPLESHEET="$(pwd)/samplesheet.csv"
fi

if [ "${MODE}" == "SAMPLESHEET_INPUT" ];
then
    SAMPLESHEET="${user_input}"
fi

if [ "${MODE}" == "DIRECTORY" ];
then
    mkdir fasta
    working_dir=$(pwd)
    cd "${user_input}"
    for filename in *
    do
        echo "${filename}"
        ln -s "$(pwd)/${filename}" "$working_dir/fasta/$(echo ${filename} | sed --expression='s/\s/\-/g')"
    done

    cd ${working_dir}
    create-samplesheet --directory "./fasta" --suffix "<%= context.prot_mode %>" ${OUTPUT_FORMAT}
    SAMPLESHEET="$(pwd)/samplesheet.csv"
fi

PROT_MODE=""
ARGS=""

if [ "<%= context.full_dbs %>" == "full" ];
then
    FULL_DB="true"
else
    FULL_DB="false"
fi

[[ "<%= context.af_method %>" == "af2"  ]] && PROT_MODE="alphafold2" && ARGS="--alphafold2_db ${DB_PATH} --alphafold2_model_preset <%= context.prot_mode %> --full_dbs ${FULL_DB} --alphafold2_mode split_msa_prediction"
[[ "<%= context.af_method %>" == "cf"   ]] && PROT_MODE="colabfold" && ARGS="--colabfold_db ${DB_PATH}"
[[ "<%= context.af_method %>" == "esmf" ]] && PROT_MODE="esmfold" && ARGS="--esmfold_db ${DB_PATH}/esmfold_weights --esmfold_model_preset <%= context.prot_mode %>"
[[ "<%= context.af_method %>" == "rfaa" ]] && PROT_MODE="rosettafold_all_atom" && ARGS="--rosettafold_all_atom_db ${DB_PATH}"
[[ "<%= context.af_method %>" == "hf3"  ]] && PROT_MODE="helixfold3" && ARGS="--helixfold3_db ${DB_PATH}"

nextflow -c "${PROJECT_ROOT}/kod_proteinfold-${RUN_ENVIRONMENT}.config" run ${REPOSITORY} -r ${BRANCH} -latest \
    --input "${SAMPLESHEET}" \
    --outdir "${OUT_DIR}" \
    --mode "${PROT_MODE}" \
    --use_gpu \
    --monochrome_logs \
    -ansi-log false \
    ${ARGS} \
    -profile singularity
